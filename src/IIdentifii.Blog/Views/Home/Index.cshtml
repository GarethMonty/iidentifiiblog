@model PagedApiResponse<BlogPost>
@using IIdentifii.Blog.Shared
@using System.Text.Json
@using System.Text.Json.Serialization
@{
    ViewData["Title"] = "Blog Posts";
    var currentQuery = Context.Request.Query;
}

@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Mvc.ViewEngines
@inject IWebHostEnvironment Environment
@inject ICompositeViewEngine Engine
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - IIdentifii.Blog</title>

    <environment include="Development">
        <link rel="stylesheet" href="~/Identity/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/Identity/css/site.css" />
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css"
              integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We" crossorigin="anonymous"
              asp-fallback-href="~/Identity/lib/bootstrap/dist/css/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute" />
        <link rel="stylesheet" href="~/Identity/css/site.css" asp-append-version="true" />
    </environment>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" href="~/">IIdentifii.Blog</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
                    @if(User?.Identity?.IsAuthenticated != true)
                    {
                        var result = Engine.FindView(ViewContext, "_LoginPartial", isMainPage: false);
                        @if (result.Success)
                        {
                            await Html.RenderPartialAsync("_LoginPartial");
                        }
                        else
                        {
                            throw new InvalidOperationException("The default Identity UI layout requires a partial view '_LoginPartial' " +
                                "usually located at '/Pages/_LoginPartial' or at '/Views/Shared/_LoginPartial' to work. Based on your configuration " +
                                $"we have looked at it in the following locations: {System.Environment.NewLine}{string.Join(System.Environment.NewLine, result.SearchedLocations)}.");
                        }
                    }

                </div>
            </div>
        </nav>
    </header>

    <div class="container">
        <partial name="_CookieConsentPartial" optional />
        <main role="main" class="pb-1">
            <div class="container py-5">
                <h1 class="mb-4">Browse Blog Posts</h1>

                <form method="get" class="mb-4">
                    <div class="row g-2 align-items-end">
                        <div class="col-md-4">
                            <label class="form-label">Search</label>
                            <input type="text" name="filter.query" class="form-control" placeholder="Title or content" value="@currentQuery["filter.query"]" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Sort By</label>
                            <select class="form-select" name="sort.sortBy">
                                <option value="PostedAt" selected="@(currentQuery["sort.sortBy"] == "PostedAt")">Posted At</option>
                                <option value="Title" selected="@(currentQuery["sort.sortBy"] == "Title")">Title</option>
                                <option value="Reactions" selected="@(currentQuery["sort.sortBy"] == "Reactions")">Reactions</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Order</label>
                            <select class="form-select" name="sort.sortOrder">
                                <option value="Descending" selected="@(currentQuery["sort.sortOrder"] == "Descending")">Descending</option>
                                <option value="Ascending" selected="@(currentQuery["sort.sortOrder"] == "Ascending")">Ascending</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Page Size</label>
                            <select class="form-select" name="paging.pageSize">
                                <option value="10">10</option>
                                <option value="20" selected>20</option>
                                <option value="50">50</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button type="submit" class="btn btn-outline-primary w-100">Apply</button>
                        </div>
                    </div>
                </form>

                @if (!Model.Data.Any())
                {
                    <div class="alert alert-warning">No blog posts found.</div>
                }
                else
                {
                    <div class="list-group mb-4">
                        @foreach (var post in Model.Data)
                        {
                            <div class="list-group-item mb-3 border rounded shadow-sm p-3">
                                <div class="d-flex justify-content-between">
                                    <h5 class="mb-1">@post.Title</h5>
                                    <small class="text-muted">@post.PostedAt.ToString("MMM dd, yyyy")</small>
                                </div>
                                <p>@post.Content.Substring(0, Math.Min(120, post.Content.Length))...</p>
                                <small class="text-muted">By @post.Author.DisplayName</small>
                                <div class="mt-2">
                                    <strong>Reactions:</strong>
                                    @foreach (var reaction in post.Reactions)
                                    {
                                        <span class="badge bg-secondary me-1">@reaction.Key: @reaction.Value</span>
                                    }
                                </div>
                                @if (post.Tags.Any())
                                {
                                    <div class="mt-2">
                                        <span class="badge bg-danger">Flagged</span>
                                        @foreach (var tag in post.Tags)
                                        {
                                            <span class="badge bg-warning text-dark">@tag.Type</span>
                                        }
                                    </div>
                                }
                                @if(User?.Identity?.IsAuthenticated == true)
                                {
                                    <div class="d-flex align-items-center mt-2" data-post-id="@post.Id">
                                        @foreach (var reaction in Enum.GetValues(typeof(ReactionType)).Cast<ReactionType>().Where(r => r != ReactionType.None))
                                        {
                                            <button class="btn btn-sm @((post.Reaction == reaction) ? "btn-primary" : "btn-outline-secondary") reaction-btn"
                                                    data-post-id="@post.Id"
                                                    data-type="@reaction"
                                                    data-current="@((post.Reaction != null || post.Reaction != ReactionType.None) ? $"{post.Reaction.ToString()}" : "")">
                                                @reaction.ToString()
                                            </button>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <nav aria-label="Pagination">
                        <ul class="pagination justify-content-center">
                            @for (int i = 1; i <= Math.Ceiling(Model.TotalCount / (double)Model.PageSize); i++)
                            {
                                <li class="page-item @(Model.Page == i ? "active" : null)">
                                    <a class="page-link" asp-route-page="@i">@i</a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            </div>
        </main>
    </div>
    <footer class="footer border-top pl-3 text-muted">
        <div class="container">
        &copy; 2025 - IIdentifii.Blog
            @{
                var foundPrivacy = Url.Page("/Privacy", new { area = "" });
            }
            @if (foundPrivacy != null)
            {
                <a asp-area="" asp-page="/Privacy">Privacy</a>
            }
        </div>
    </footer>

    <environment include="Development">
        <script src="~/Identity/lib/jquery/dist/jquery.js"></script>
        <script src="~/Identity/lib/bootstrap/dist/js/bootstrap.bundle.js"></script>
        <script src="~/Identity/js/site.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"
                asp-fallback-src="~/Identity/lib/jquery/dist/jquery.min.js"
                asp-fallback-test="window.jQuery"
                crossorigin="anonymous"
                integrity="sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2">
        </script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"
                asp-fallback-src="~/Identity/lib/bootstrap/dist/js/bootstrap.bundle.min.js"
                asp-fallback-test="window.jQuery && window.jQuery.fn && window.jQuery.fn.modal"
                crossorigin="anonymous"
                integrity="sha384-U1DAWAznBHeqEIlVSCgzq+c9gqGAJn5c/t99JyeKa9xxaYpSvHU5awsuZVVFIhvj">
        </script>
        <script src="~/Identity/js/site.js" asp-append-version="true"></script>
    </environment>
    @if(User?.Identity?.IsAuthenticated == true)
    {
        <script>
            const REACTION_API_BASE = "/api/blog/post";

            // Handles clicking a reaction button
            async function handleReactionClick(event) {
                const btn = event.currentTarget;
                const postId = btn.dataset.postId;
                const type = btn.dataset.type;
                const current = btn.dataset.current;

                try {
                    let url = `${REACTION_API_BASE}/${postId}/reaction/${type}`;
                    let method = "POST";

                    if (current === type) {
                        method = "DELETE";
                    } else if (current && current !== 'None') {
                        method = "PATCH";
                        url += `?previous=${current}`;
                    }

                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            "Content-Type": "application/json"
                        }
                    });

                    if (!response.ok) {
                        console.error("Failed reaction response", await response.text());
                        alert("Failed to process your reaction.");
                        return;
                    }

                    location.reload(); // Reload to update reactions

                } catch (error) {
                    console.error("Error processing reaction", error);
                    alert("An error occurred while reacting.");
                }
            }

            // Wire up all reaction buttons
            document.addEventListener("DOMContentLoaded", () => {
                document.querySelectorAll(".reaction-btn").forEach(btn => {
                    btn.addEventListener("click", handleReactionClick);
                });
            });

        </script>
    }
</body>
</html>